name: Convert Cloudflare Check Run to Status
on:
  check_run:
    types: [completed]

jobs:
  create_status_for_check:
    name: Create Status for Check Run
    runs-on: ubuntu-latest
    permissions:
      checks: read
      statuses: write
    steps:
      - uses: actions/github-script@v7
        id: my-script
        with:
          retry-exempt-status-codes: 400,401
          script: |
            const getPreviewUrlForCheck = (check) => {
            const regex = /<strong>Preview URL:<\/strong><\/td><td>\n<a href='(.*?)'>/s;
            const match = check?.output?.summary?.match(regex);
              return match?.[1];
            };

            const getCloudflareCheckForRef = async (ref) => {
              const {
                data: { check_runs: checks },
              } = await github.rest.checks.listForRef({
                owner: "${{ github.repository_owner }}",
                repo: "${{ github.repository }}",
                ref: ref,
              });

              return checks.find((check) => check.app.slug === "cloudflare-pages");
            };

            const createDeployStatus = async (ref, target_url) => {
              await github.rest.repos.createCommitStatus({
                owner: "onnenon",
                repo: "vcp",
                sha: ref,
                state: "success",
                context: "cloudflare preview deploy",
                target_url: target_url,
                description: "Cloudflare preview deploy successful",
              });
            };

            const main = async () => {
              const ref = "${{ github.event.check_run.check_suite.head_sha }}";
              const check = await getCloudflareCheckForRef(ref);
              const previewUrl = getPreviewUrlForCheck(check);

              if (!previewUrl) {
                return;
              }
              createDeployStatus(ref, previewUrl);
              console.log(previewUrl);
            };

            await main();
